<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Software Architecture on Nejc Korasa</title>
    <link>https://nejckorasa.github.io/tags/software-architecture/</link>
    <description>Recent content in Software Architecture on Nejc Korasa</description>
    <image>
      <title>Nejc Korasa</title>
      <url>https://avatars.githubusercontent.com/nejckorasa</url>
      <link>https://avatars.githubusercontent.com/nejckorasa</link>
    </image>
    <generator>Hugo -- 0.147.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 Feb 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://nejckorasa.github.io/tags/software-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Idempotent Processing with Kafka</title>
      <link>https://nejckorasa.github.io/posts/idempotent-kafka-procesing/</link>
      <pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://nejckorasa.github.io/posts/idempotent-kafka-procesing/</guid>
      <description>&lt;h2 id=&#34;duplicate-messages-are-inevitable&#34;&gt;Duplicate Messages are Inevitable&lt;/h2&gt;
&lt;p&gt;Duplicate messages are an inherent aspect of message-based systems and can occur for various reasons. In the context of Kafka, it is essential to ensure that your application is able to handle these duplicates effectively. As a Kafka consumer, there are several scenarios that can lead to the consumption of duplicate messages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There can be an actual duplicate message in the kafka topic you are consuming from. The consumer is reading 2 different messages that should be treated as duplicates.&lt;/li&gt;
&lt;li&gt;You consume the same message more than once due to various error scenarios that can happen, either in your application, or in the communication with a Kafka broker.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To ensure the idempotent processing and handle these scenarios, it&amp;rsquo;s important to have a proper strategy to detect and handle duplicate messages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Avoid Tight Coupling of Tests to Implementation Details</title>
      <link>https://nejckorasa.github.io/posts/microservice-testing/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://nejckorasa.github.io/posts/microservice-testing/</guid>
      <description>&lt;p&gt;Building backend systems today will likely involve building many small, independent services that communicate and coordinate with one another to form a distributed system. While there are many resources available discussing the pros and cons of microservices, the architecture, and when it is appropriate to use, I want to focus on the functional testing of microservices and how it differs from traditional approaches.&lt;/p&gt;
&lt;p&gt;In my experience, the &amp;ldquo;best testing practices&amp;rdquo; have evolved with the introduction of microservices, and traditional &lt;em&gt;testing pyramids&lt;/em&gt; may not be the most effective or even potentially harmful in this context. In my work on various projects and companies, including the development of new digital banks and the migration of older systems to microservices as they scale, I have often encountered disagreements about the most appropriate testing strategies for microservices.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
